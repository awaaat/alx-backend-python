pipeline {
    agent none // Define agent per stage
    environment {
        VENV = 'venv'
        GITHUB_CREDENTIALS = credentials('github-credentials') // GitHub credentials ID
    }
    stages {
        stage('Debug Environment') {
            agent {
                docker {
                    image 'python:3.9'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket
                }
            }
            steps {
                sh '''
                    echo "Working directory:"
                    pwd
                    echo "Directory contents:"
                    ls -la
                    echo "Messaging app contents:"
                    ls -la messaging_app/ || echo "messaging_app directory not found"
                    python3 --version
                    pip3 --version
                '''
            }
        }

        stage('Set Up Environment') {
            agent {
                docker {
                    image 'python:3.9'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                sh '''
                    python3 -m pip install --upgrade pip
                    python3 -m pip install -r messaging_app/requirements.txt
                    python3 -m pip install pytest pytest-django
                '''
            }
        }

        stage('Run Tests') {
            agent {
                docker {
                    image 'python:3.9'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                sh '''
                    mkdir -p messaging_app/reports
                    cd messaging_app
                    python3 -m pytest --junitxml=reports/test-report.xml
                '''
            }
        }

        stage('Archive Reports') {
            agent {
                docker {
                    image 'python:3.9'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                archiveArtifacts artifacts: 'messaging_app/reports/test-report.xml', allowEmptyArchive: true
            }
        }

        stage('Build Docker Image') {
            agent any // Run on host to access Docker daemon
            steps {
                script {
                    sh '''
                        cd messaging_app
                        docker build -t allano/messaging-app:latest .
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            agent any
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                            docker push allano/messaging-app:latest
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            node('') {
                junit testResults: 'messaging_app/reports/test-report.xml', allowEmptyResults: true, skipPublishingChecks: true
            }
        }
        failure {
            echo 'Build failed! Check test reports.'
        }
    }
}