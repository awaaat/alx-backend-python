pipeline {
    agent { docker { image 'python:3.9' } }
    environment {
        VENV = 'venv'
        GITHUB_CREDENTIALS = credentials('github-credentials')
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials') // Add Docker Hub credentials
        IMAGE_NAME = 'awaaat/messaging_app'
        IMAGE_TAG = 'latest'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/awaaat/alx-backend-python'
            }
        }
        stage('Setup Environment') {
            steps {
                sh '''
                    python3 -m venv ${VENV}
                    . ${VENV}/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt
                    pip3 install pytest pytest-django pytest-cov
                '''
            }
        }
        stage('Run Tests') {
            steps {
                sh '''
                    . ${VENV}/bin/activate
                    cd messaging_app
                    python -m pytest --junitxml=reports/test-report.xml --cov=. --cov-report=xml --cov-report=html
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "./messaging_app")
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
        stage('Archive Reports') {
            steps {
                archiveArtifacts artifacts: 'messaging_app/reports/**', allowEmptyArchive: true
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'messaging_app/reports',
                    reportFiles: 'index.html',
                    reportName: 'Coverage Report'
                ])
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Build, tests, and Docker push completed successfully!'
        }
        failure {
            echo 'Build failed! Check the logs for details.'
        }
    }
}